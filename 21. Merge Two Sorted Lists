// ...........................................................................
// https://leetcode.com/problems/merge-two-sorted-lists/submissions/865110333/
// 

//Definition for singly-linked list.
    public class ListNode {
     public int val;
     public ListNode next;
     public ListNode(int val=0, ListNode next=null) {
         this.val = val;
         this.next = next;
     }
 }

public class Solution
{
    //first set the head, then assign the next nodes only
    public ListNode MergeTwoLists(ListNode list1, ListNode list2)
    {
        if (list1 == null)
        {
            return list2;
        }
        if (list2 == null)
        {
            return list1;
        }
        ListNode temp, head;
        if (list1.val > list2.val)
        {
            temp = head = new ListNode(list2.val);
            list2 = list2.next;
        }
        else
        {
            temp = head = new ListNode(list1.val);
            list1 = list1.next;
        }

        while (list1 != null || list2 != null)
        {
            if (list1 == null && list2 != null)
            {
                temp.next = new ListNode(list2.val);
                list2 = list2.next;
            }
            else if (list1 != null && list2 == null)
            {
                temp.next = new ListNode(list1.val);
                list1 = list1.next;
            }
            else
            {
                if (list1.val > list2.val)
                {
                    temp.next = new ListNode(list2.val);
                    list2 = list2.next;
                }
                else
                {
                    temp.next = new ListNode(list1.val);
                    list1 = list1.next;
                }


            }
            temp = temp.next;

        }

        return head;

        //2nd method (shorter version)


        //ListNode head = new ListNode(-1);
        //ListNode list = head;

        //while (list1 != null && list2 != null)
        //{
        //    if (list1.val <= list2.val)
        //    {
        //        list.next = list1;
        //        list1 = list1.next;
        //    }
        //    else
        //    {
        //        list.next = list2;
        //        list2 = list2.next;
        //    }
        //    list = list.next;
        //}

        //list.next = list1 == null ? list2 : list1;
        //return head.next;
    }
}
