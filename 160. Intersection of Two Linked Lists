// ................................................................................................
// https://leetcode.com/problems/intersection-of-two-linked-lists/submissions/907462889/
// Runtime : 1 ms
// Memory : 45 MB
// ........................................ Java ..................................

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode ptrA = headA, ptrB = headB;
    while (ptrA != ptrB) { 
        ptrA = ptrA == null ? headB : ptrA.next; 
        ptrB = ptrB == null ? headA : ptrB.next; 
	}
	return ptrA;
        
    }
}

// ...................................... c#...................................
// https://leetcode.com/problems/intersection-of-two-linked-lists/submissions/907462625/
// Runtime: 125 ms
// Memory: 51.8 MB


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        
    ListNode ptrA = headA, ptrB = headB;
    while (ptrA != ptrB) {
        if(ptrA == null)
        {
            ptrA = headB;
        }
        else
        {
            ptrA = ptrA.next;
        }

        if(ptrB == null)
        {
            ptrB = headA;
        }
        else
        {
            ptrB = ptrB.next;
        }
    
	}
	return ptrA;
}
    }


// Same Code for both
